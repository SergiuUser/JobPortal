// <auto-generated />
using System;
using JobPortalAPI.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPortalAPI.Migrations
{
    [DbContext(typeof(JobPortalContext))]
    [Migration("20240310224355_JobPortalMigratiob_V3")]
    partial class JobPortalMigratiob_V3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobCategoryModelJobsModel", b =>
                {
                    b.Property<int>("JobCategoriesID")
                        .HasColumnType("int");

                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.HasKey("JobCategoriesID", "JobsID");

                    b.HasIndex("JobsID");

                    b.ToTable("JobsCategory", (string)null);
                });

            modelBuilder.Entity("JobPortalAPI.Models.ApplicationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PersonID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ResumePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("JobID");

                    b.HasIndex("PersonID");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("JobPortalAPI.Models.ApplicationResponseModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationID")
                        .IsUnique();

                    b.ToTable("ApplicationResponseModel");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CategoryRequestModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Accepted")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CompanyAddressModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID")
                        .IsUnique()
                        .HasFilter("[CompanyID] IS NOT NULL");

                    b.ToTable("CompanyAddresse");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CompanyLoginInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID")
                        .IsUnique()
                        .HasFilter("[CompanyID] IS NOT NULL");

                    b.ToTable("CompanyLoginInfo");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CompanyModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("JobPortalAPI.Models.JobCategoryModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("JobPortalAPI.Models.JobsModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CompanyID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSchedule")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("JobPortalAPI.Models.PersonAddressModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonID")
                        .IsUnique()
                        .HasFilter("[PersonID] IS NOT NULL");

                    b.ToTable("PersonAddresse");
                });

            modelBuilder.Entity("JobPortalAPI.Models.PersonLoginInfoModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonID")
                        .IsUnique()
                        .HasFilter("[PersonID] IS NOT NULL");

                    b.ToTable("PersonLogin");
                });

            modelBuilder.Entity("JobPortalAPI.Models.PersonModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Peson");
                });

            modelBuilder.Entity("JobsModelPersonModel", b =>
                {
                    b.Property<int>("SavedJobsID")
                        .HasColumnType("int");

                    b.Property<int>("peopleID")
                        .HasColumnType("int");

                    b.HasKey("SavedJobsID", "peopleID");

                    b.HasIndex("peopleID");

                    b.ToTable("PeopleSavedJobs", (string)null);
                });

            modelBuilder.Entity("JobCategoryModelJobsModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.JobCategoryModel", null)
                        .WithMany()
                        .HasForeignKey("JobCategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalAPI.Models.JobsModel", null)
                        .WithMany()
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortalAPI.Models.ApplicationModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.JobsModel", "Jobs")
                        .WithMany("Applications")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalAPI.Models.PersonModel", "Person")
                        .WithMany("Applications")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jobs");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("JobPortalAPI.Models.ApplicationResponseModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.ApplicationModel", "Application")
                        .WithOne("ApplicationResponse")
                        .HasForeignKey("JobPortalAPI.Models.ApplicationResponseModel", "ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CategoryRequestModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CompanyModel", "Company")
                        .WithMany("CategoryRequest")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CompanyAddressModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CompanyModel", "Company")
                        .WithOne("Adress")
                        .HasForeignKey("JobPortalAPI.Models.CompanyAddressModel", "CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CompanyLoginInfo", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CompanyModel", "Company")
                        .WithOne("Login")
                        .HasForeignKey("JobPortalAPI.Models.CompanyLoginInfo", "CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortalAPI.Models.JobsModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CompanyModel", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortalAPI.Models.PersonAddressModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.PersonModel", "Person")
                        .WithOne("Address")
                        .HasForeignKey("JobPortalAPI.Models.PersonAddressModel", "PersonID");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("JobPortalAPI.Models.PersonLoginInfoModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.PersonModel", "Person")
                        .WithOne("Login")
                        .HasForeignKey("JobPortalAPI.Models.PersonLoginInfoModel", "PersonID");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("JobsModelPersonModel", b =>
                {
                    b.HasOne("JobPortalAPI.Models.JobsModel", null)
                        .WithMany()
                        .HasForeignKey("SavedJobsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalAPI.Models.PersonModel", null)
                        .WithMany()
                        .HasForeignKey("peopleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortalAPI.Models.ApplicationModel", b =>
                {
                    b.Navigation("ApplicationResponse");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CompanyModel", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("CategoryRequest");

                    b.Navigation("Jobs");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("JobPortalAPI.Models.JobsModel", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("JobPortalAPI.Models.PersonModel", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Applications");

                    b.Navigation("Login");
                });
#pragma warning restore 612, 618
        }
    }
}
